f (dynamic_cast<Fireball*>(spell)) {
        dynamic_cast<Fireball*>(spell)->revealFirepower();
        return;
    } else if (dynamic_cast<Frostbite*>(spell)) {
        dynamic_cast<Frostbite*>(spell)->revealFrostpower();
        return;
    } else if (dynamic_cast<Waterbolt*>(spell)) {
        dynamic_cast<Waterbolt*>(spell)->revealWaterpower();
        return;
    } else if (dynamic_cast<Thunderstorm*>(spell)) {
        dynamic_cast<Thunderstorm*>(spell)->revealThunderpower();
        return;
    }

    vector<vector<int> > dp(1111, vector<int>(1111, 0));

    string A = spell->revealScrollName();
    string B = SpellJournal::read();
        int lena=A.length();
        int lenb=B.length();

        for(int i=0;i<=lena;i++) dp[i][0]=0;
        for(int j=0;j<=lenb;j++) dp[0][j]=0;

        for(int i=1;i<=lena;i++)
        {
            for(int j=1;j<=lenb;j++)
            {
                if(A[i-1]==B[j-1]) dp[i][j]=dp[i-1][j-1]+1;
                else dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
            }
        }

        cout << dp[lena][lenb] << endl;
  /* Enter your code here */

